@page "/"
@inject HttpClient Http
@using System.Text.Json
@using SWRPGInitTracker.Models
@using SWRPGInitTracker.Json

@if (adversaries == null)
{
    <p>Loading...</p>
}
else
{

    <div class="modal @ModalClass" id="sourcesModal" tabindex="-1" aria-labelledby="sourcesModalLabel" aria-hidden="true" style="display:@ModalDisplay">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="sourcesModalLabel">Select sources</h5>
                </div>
                <div class="modal-body">
                    @*@for (int i=0; i<sources.Count; i++)
                        {
                        // see https://stackoverflow.com/a/56426146/323447
                        var iCopy = i;

                        <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="check-source-@i" @onchange="@(e => sources[iCopy] = e.Value as Boolean)">
                        <label class="form-check-label" for="check-source-@i">
                        @sources[i].Name
                        </label>
                        </div>
                        }*@
                    <EditForm Model="adversarySources" OnSubmit="UpdateData">
                        <DataAnnotationsValidator />
                        @foreach (var source in adversarySources)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="check-@source.Id" @bind="source.Selected">
                                <label class="form-check-label" for="check-@source.Id">
                                    @source.Name
                                </label>
                            </div>
                        }
                        <button type="button" class="btn btn-secondary" @onclick="ToggleSettings">Close</button>
                        <button type="submit" class="btn btn-primary" @onclick="ToggleSettings">Save changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade show"></div>
    }

    <div class="row">
        <div class="col-lg-6 col-xl-6 col-xxl-6 pb-4">
            <div class="row mb-4">
                <Initiative></Initiative>
            </div>
            <div class="row">
                <WoundsStrain @ref="_woundsStrain"></WoundsStrain>
            </div>
        </div>
        <div class="col-lg-6 col-xl-6 col-xxl-6">
            <ul class="nav nav-pills nav-fill mb-3" id="pills-tab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="pills-adversary-tab" data-bs-toggle="pill" data-bs-target="#pills-adversary" type="button" role="tab" aria-controls="pills-adversary" aria-selected="true">Adversaries</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="pills-crits-tab" data-bs-toggle="pill" data-bs-target="#pills-crits" type="button" role="tab" aria-controls="pills-crits" aria-selected="false">Critical Hits</button>
                </li>
                @*<li class="nav-item" role="presentation">
                    <button class="nav-link" id="pills-contact-tab" data-bs-toggle="pill" data-bs-target="#pills-contact" type="button" role="tab" aria-controls="pills-contact" aria-selected="false">Contact</button>
                </li>*@
            </ul>
            <div class="tab-content" id="pills-tabContent">
                <div class="tab-pane fade show active" id="pills-adversary" role="tabpanel" aria-labelledby="pills-adversary-tab">
                    <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                    <h2>Adversaries</h2>
                </div>
                <div>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleSettings"><i class="bi bi-gear-wide-connected"></i> Sources</button>
                </div>
            </div>
            @if (filtered > 20)
            {
                <small>Showing top 20 of @filtered (@loaded loaded)</small>
            }
            else
            {
                <small>Showing @filtered of @loaded loaded</small>
            }
            <div class="input-group mb-2">
                <span class="input-group-text" id="searchInputAddon"><i class="bi bi-search"></i></span>
                <input type="text" class="form-control" id="searchInput" placeholder="Filter Adversaries..." aria-label="Filter Adversaries" aria-labelledby="searchInputAddon" @bind-value="inputVal" @onkeyup="FilterAdversaryList" />
            </div>

            <AdversaryList Adversaries="filteredList" @ref="_adversaryList"></AdversaryList>
                </div>
                <div class="tab-pane fade" id="pills-crits" role="tabpanel" aria-labelledby="pills-crits-tab">
                    <h2>Critical Hits</h2>
                    <CritList Crits="crits" @ref="_critList"></CritList>
                </div>
                @*<div class="tab-pane fade" id="pills-contact" role="tabpanel" aria-labelledby="pills-contact-tab">...</div>*@
            </div>

            
        </div>
    </div>




}

@if (!String.IsNullOrEmpty(exception))
{
    <pre class="text-danger">@exception</pre>
}

@code {
    private string content;
    private List<Crit> crits;
    private List<Adversary> adversaries;
    private List<Adversary> filteredList;
    private List<Source> adversarySources;
    private List<Source> critSources;
    private string exception = String.Empty;
    private string inputVal = String.Empty;
    private int loaded;
    private int filtered;

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;


    private WoundsStrain _woundsStrain;
    private AdversaryList _adversaryList;
    private CritList _critList;

    protected override async Task OnInitializedAsync()
    {
        adversaries = new();
        adversarySources = Sources.GetAdversaryList();

        crits = new();
        critSources = Sources.GetCritsList();

        await UpdateData();

        _adversaryList.WoundsStrain = _woundsStrain;
    }

    private async Task UpdateData()
    {
        adversaries.Clear();
        foreach (var source in adversarySources.Where(x => x.Selected).ToList())
        {
            await ImportAdversary(source.Url);
        }
        adversaries = adversaries.OrderBy(x => x.Name).ToList();
        loaded = adversaries.Count;
        FilterAdversaryList();

        crits.Clear();
        foreach (var source in critSources.Where(x => x.Selected).ToList())
        {
            await ImportCrit(source.Url);
        }
    }

    private async Task ImportAdversary(string url)
    {
        content = await Http.GetStringAsync(url);
        if (!String.IsNullOrEmpty(content))
        {
            try
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    };
                var importList = JsonSerializer.Deserialize<List<Adversary>>(content);
                if (importList != null && importList.Any())
                {
                    adversaries.AddRange(importList);
                }
            }
            catch (Exception ex)
            {
                exception = ex.Message;
            }
        }
    }

    private async Task ImportCrit(string url)
    {
        content = await Http.GetStringAsync(url);
        if (!String.IsNullOrEmpty(content))
        {
            try
            {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    };
                var importList = JsonSerializer.Deserialize<List<Crit>>(content);
                if (importList != null && importList.Any())
                {
                    crits.AddRange(importList);
                }
            }
            catch (Exception ex)
            {
                exception = ex.Message;
            }
        }
    }

    private void FilterAdversaryList()
    {
        if (String.IsNullOrEmpty(inputVal))
        {
            filteredList = adversaries;
        }
        else
        {
            filteredList = adversaries.Where(x => x.Name.Contains(inputVal, StringComparison.OrdinalIgnoreCase)).ToList();

        }
        filtered = filteredList.Count;
    }

    private void ToggleSettings()
    {
        if (ModalDisplay == "none;")
        {
            ModalDisplay = "block;";
            ModalClass = "Show";
            ShowBackdrop = true;
            StateHasChanged();
        }
        else
        {
            ModalDisplay = "none;";
            ModalClass = "";
            ShowBackdrop = false;
            StateHasChanged();
        }
    }

}